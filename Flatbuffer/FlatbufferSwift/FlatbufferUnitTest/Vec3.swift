// Code generated by flatc command **DO NOT MODIFIED THIS CODE**

import Foundation

public class Vec3: Struct {}

extension Vec3 {

	var x: Float {
		get {
			return (data?.getFloat(at: position + 0))!
		}
		set {
			try? self.data?.putFloat(at: position + 0, with: newValue)
		}
	}

	var y: Float {
		get {
			return (data?.getFloat(at: position + 4))!
		}
		set {
			try? self.data?.putFloat(at: position + 4, with: newValue)
		}
	}

	var z: Float {
		get {
			return (data?.getFloat(at: position + 8))!
		}
		set {
			try? self.data?.putFloat(at: position + 8, with: newValue)
		}
	}

	var test1: Double {
		get {
			return (data?.getDouble(at: position + 16))!
		}
		set {
			try? self.data?.putDouble(at: position + 16, with: newValue)
		}
	}

	var test2: Color {
		get {
			return Color(rawValue: (data!.getInteger(at: position + 24) as Int8))!
		}
		set {
			try? self.data?.putByte(at: position + 24, with: newValue.rawValue)
		}
	}

	var test3: Test {
		get {
			return getTest3(test: Test())
		}
	}

	open func getTest3(test: Test) -> Test {
		return test.__assign(at: position + 26, withData: &data!) as! Test
	}

}

extension Vec3 {

	public static func createVec3(_ builder: Builder, test3_b: Int, test3_a: Int, test2: Int, test1: Float64, z: Float32, y: Float32, x: Float32) throws -> UOffsetT {
		try builder.prepare(size: 16, additionalBytes: 32)
		builder.paddingZero(count: 2)
		try builder.prepare(size: 2, additionalBytes: 4)
		builder.paddingZero(count: 1)
		try builder.putByte(with: Int8(truncatingBitPattern: test3_b))
		try builder.putShort(with: Int16(truncatingBitPattern: test3_a))
		builder.paddingZero(count: 1)
		try builder.putByte(with: Int8(truncatingBitPattern: test2))
		try builder.putDouble(with: test1)
		builder.paddingZero(count: 4)
		try builder.putFloat(with: z)
		try builder.putFloat(with: y)
		try builder.putFloat(with: x)
		return builder.offset()
	}

}

