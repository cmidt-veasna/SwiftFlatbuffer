// Code generated by flatc command **DO NOT MODIFIED THIS CODE**

import Foundation

public class Stat: Table {


}

extension Stat {

	open static func getRootAsStat(withData: inout Data) -> Stat {
		return getRootAsStat(withData: &withData, stat: Stat())
	}

	open static func getRootAsStat(withData: inout Data, stat: Stat) -> Stat {
		return stat.__assign(at: withData.getOffset(at: 0), withData: &withData) as! Stat
	}

	var id: String {
		get {
			let offset = __offset(virtualTableOffset: 4)
			return offset != 0 ? __string(offset: offset + position) : ""
		}
	}

	var val: Int64 {
		get {
			let offset = __offset(virtualTableOffset: 6)
			return offset != 0 ? (data?.getLong(at: offset + position))! : 0
		}
		set {
			let offset = __offset(virtualTableOffset: 6)
			if (offset != 0) {
				try? self.data?.putLong(at: offset + position, with: newValue)
			}
		}
	}

	var count: UInt16 {
		get {
			let offset = __offset(virtualTableOffset: 8)
			return offset != 0 ? (data!.getInteger(at: offset + position)) as UInt16 : 0
		}
		set {
			let offset = __offset(virtualTableOffset: 8)
			if (offset != 0) {
				try? self.data?.putUnsignedShort(at: offset + position, with: newValue)
			}
		}
	}

}

extension Stat {

	public static func startStat(_ builder: Builder) throws {
		try builder.startObject(numberOfFields: 3)
	}

	public static func addId(_ builder: Builder, idOffset: UOffsetT) throws {
		try builder.putOffset(virtualTable: 0, offset: idOffset, defaultOffset: 0)
	}

	public static func addVal(_ builder: Builder, val: Int64) throws {
		try builder.putLong(offset: 1, with: val, byDefault: 0)
	}

	public static func addCount(_ builder: Builder, count: UInt16) throws {
		try builder.putUnsignedShort(offset: 2, with: count, byDefault: 0)
	}

	public static func endStat(_ builder: Builder) throws -> UOffsetT {
		return try builder.endObject()
	}

}

