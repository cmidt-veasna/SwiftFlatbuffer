// Code generated by flatc command **DO NOT MODIFIED THIS CODE**

import Foundation

public class Monster: Table {

	fileprivate var inventoryVectorHelper: VectorIntegerHelper<Monster, UInt8>?
	fileprivate var test4VectorHelper: VectorTableHelper<Monster, Test>?
	fileprivate var testarrayofstringVectorHelper: VectorStringHelper<Monster>?
	fileprivate var testarrayoftablesVectorHelper: VectorTableHelper<Monster, Monster>?
	fileprivate var testnestedflatbufferVectorHelper: VectorIntegerHelper<Monster, UInt8>?
	fileprivate var testarrayofboolsVectorHelper: VectorBoolHelper<Monster>?
	fileprivate var testarrayofstring2VectorHelper: VectorStringHelper<Monster>?

	public override func compareKey(of: UOffsetT, with: UOffsetT, by data: inout Data) -> Bool {
		return Table.compareString(of: Struct.__offset(virtualTableOffset: 10, offset: Int(of), data: &data), with: Struct.__offset(virtualTableOffset: 10, offset: Int(with), data: &data), by: &data) <= 0
	}

	public static func lookup(at: Int, by key: String, with data: inout Data) -> Monster {
		let keyBytes = [UInt8](key.utf8)
		var vectorLocation = data.count - at
		var span = Int(data.getInt(at: vectorLocation))
		var start = 0
		vectorLocation += 4
		while(span != 0) {
			var middle = span / 2
			let tableOffset = Table.__indirect(offset: vectorLocation + 4 * Int(start + middle), data: &data)
			let comp = Table.compareString(of: Struct.__offset(virtualTableOffset: 10, offset: data.count - tableOffset, data: &data), with: keyBytes, by: &data)
			if comp > 0 {
				span = middle
			} else if comp < 0 {
				middle += 1
				start += middle
				span -= middle
			} else {
				return Monster().__assign(at: tableOffset, withData: &data) as! Monster
			}
		}
		return Monster()
	}
}

/// an example documentation comment: monster object
extension Monster {

	open static func getRootAsMonster(withData: inout Data) -> Monster {
		return getRootAsMonster(withData: &withData, monster: Monster())
	}

	open static func getRootAsMonster(withData: inout Data, monster: Monster) -> Monster {
		return monster.__assign(at: withData.getOffset(at: 0), withData: &withData) as! Monster
	}

	open static func MonsterBufferHasIdentifier(withData: inout Data) -> Bool {
		return __has_identifier(withData: &withData, at: 0, ident: "MONS")
	}

	var pos: Vec3 {
		get {
			return getPos(vec3: Vec3())
		}
	}

	open func getPos(vec3: Vec3) -> Vec3 {
		let offset = __offset(virtualTableOffset: 4)
		return vec3.__assign(at: offset + position, withData: &data!) as! Vec3
	}

	var mana: Int16 {
		get {
			let offset = __offset(virtualTableOffset: 6)
			return offset != 0 ? (data!.getInteger(at: offset + position)) as Int16 : 150
		}
		set {
			let offset = __offset(virtualTableOffset: 6)
			if (offset != 0) {
				try? self.data?.putShort(at: offset + position, with: newValue)
			}
		}
	}

	var hp: Int16 {
		get {
			let offset = __offset(virtualTableOffset: 8)
			return offset != 0 ? (data!.getInteger(at: offset + position)) as Int16 : 100
		}
		set {
			let offset = __offset(virtualTableOffset: 8)
			if (offset != 0) {
				try? self.data?.putShort(at: offset + position, with: newValue)
			}
		}
	}

	var name: String {
		get {
			let offset = __offset(virtualTableOffset: 10)
			return offset != 0 ? __string(offset: offset + position) : ""
		}
	}

	var inventory: VectorIntegerHelper<Monster, UInt8> {
		if let inventoryVector = inventoryVectorHelper as VectorIntegerHelper<Monster, UInt8>? {
			return inventoryVector
		}
		inventoryVectorHelper = VectorIntegerHelper<Monster, UInt8>(object: self, offset: 14)
		{ (table, at, value) -> Bool in
			do {
				try table.data?.putUnsignedByte(at: at, with: value)
				return true
			} catch {
				return false
			}
		}
		return inventoryVectorHelper!
	}

	var inventoryCount: Int {
		get {
			let offset = __offset(virtualTableOffset: 14)
			return offset != 0 ? __vectorLength(offset: offset) : 0
		}
	}

	var color: Color {
		get {
			let offset = __offset(virtualTableOffset: 16)
			return Color(rawValue: offset != 0 ? (data!.getInteger(at: offset + position) as Int8) : 8)!
		}
		set {
			let offset = __offset(virtualTableOffset: 16)
			if (offset != 0) {
				try? self.data?.putByte(at: offset + position, with: newValue.rawValue)
			}
		}
	}

	var testType: AnySwift {
		get {
			let offset = __offset(virtualTableOffset: 18)
			return AnySwift(rawValue: offset != 0 ? (data!.getInteger(at: offset + position) as UInt8) : 0)!
		}
		set {
			let offset = __offset(virtualTableOffset: 18)
			if (offset != 0) {
				try? self.data?.putUnsignedByte(at: offset + position, with: newValue.rawValue)
			}
		}
	}

	open func test(table: Table) -> Table {
		let offset = __offset(virtualTableOffset: 20)
		return offset != 0 ? __union(table: table, offset: offset) : Table()
	}

	var test4: VectorTableHelper<Monster, Test> {
		if let test4Vector = test4VectorHelper as VectorTableHelper<Monster, Test>? {
			return test4Vector
		}
		test4VectorHelper = VectorTableHelper<Monster, Test>(object: self, offset: 22)
		return test4VectorHelper!
	}

	var test4Count: Int {
		get {
			let offset = __offset(virtualTableOffset: 22)
			return offset != 0 ? __vectorLength(offset: offset) : 0
		}
	}

	var testarrayofstring: VectorStringHelper<Monster> {
		if let testarrayofstringVector = testarrayofstringVectorHelper as VectorStringHelper<Monster>? {
			return testarrayofstringVector
		}
		testarrayofstringVectorHelper = VectorStringHelper<Monster>(object: self, offset: 24)
		return testarrayofstringVectorHelper!
	}

	var testarrayofstringCount: Int {
		get {
			let offset = __offset(virtualTableOffset: 24)
			return offset != 0 ? __vectorLength(offset: offset) : 0
		}
	}

/// an example documentation comment: this will end up in the generated code
/// multiline too
	var testarrayoftables: VectorTableHelper<Monster, Monster> {
		if let testarrayoftablesVector = testarrayoftablesVectorHelper as VectorTableHelper<Monster, Monster>? {
			return testarrayoftablesVector
		}
		testarrayoftablesVectorHelper = VectorTableHelper<Monster, Monster>(object: self, offset: 26)
		return testarrayoftablesVectorHelper!
	}

	var testarrayoftablesCount: Int {
		get {
			let offset = __offset(virtualTableOffset: 26)
			return offset != 0 ? __vectorLength(offset: offset) : 0
		}
	}

	var enemy: Monster {
		get {
			return getEnemy(monster: Monster())
		}
	}

	open func getEnemy(monster: Monster) -> Monster {
		let offset = __offset(virtualTableOffset: 28)
		return monster.__assign(at: __indirect(offset: offset + position), withData: &data!) as! Monster
	}

	var testnestedflatbuffer: VectorIntegerHelper<Monster, UInt8> {
		if let testnestedflatbufferVector = testnestedflatbufferVectorHelper as VectorIntegerHelper<Monster, UInt8>? {
			return testnestedflatbufferVector
		}
		testnestedflatbufferVectorHelper = VectorIntegerHelper<Monster, UInt8>(object: self, offset: 30)
		{ (table, at, value) -> Bool in
			do {
				try table.data?.putUnsignedByte(at: at, with: value)
				return true
			} catch {
				return false
			}
		}
		return testnestedflatbufferVectorHelper!
	}

	var testnestedflatbufferCount: Int {
		get {
			let offset = __offset(virtualTableOffset: 30)
			return offset != 0 ? __vectorLength(offset: offset) : 0
		}
	}

	var testnestedflatbufferAsMonster: Monster {
		return testnestedflatbufferAsMonster(monster: Monster())
	}

	open func testnestedflatbufferAsMonster(monster: Monster) -> Monster {
		let offset = __offset(virtualTableOffset: 30)
		return offset == 0 ? monster : monster.__assign(at: __indirect(offset: __vector(offset: offset)), withData: &self.data!) as! Monster
	}

	var testempty: Stat {
		get {
			return getTestempty(stat: Stat())
		}
	}

	open func getTestempty(stat: Stat) -> Stat {
		let offset = __offset(virtualTableOffset: 32)
		return stat.__assign(at: __indirect(offset: offset + position), withData: &data!) as! Stat
	}

	var testbool: Bool {
		get {
			return __bool(offset: 34, value: false)
		}
		set {
			let offset = __offset(virtualTableOffset: 34)
			if (offset != 0) {
			try? self.data?.putByte(at: offset + position, with: newValue ? 1 : 0)
			}
		}
	}

	var testhashs32Fnv1: Int32 {
		get {
			let offset = __offset(virtualTableOffset: 36)
			return offset != 0 ? (data!.getInteger(at: offset + position)) as Int32 : 0
		}
		set {
			let offset = __offset(virtualTableOffset: 36)
			if (offset != 0) {
				try? self.data?.putInt(at: offset + position, with: newValue)
			}
		}
	}

	var testhashu32Fnv1: UInt32 {
		get {
			let offset = __offset(virtualTableOffset: 38)
			return offset != 0 ? (data!.getInteger(at: offset + position)) as UInt32 : 0
		}
		set {
			let offset = __offset(virtualTableOffset: 38)
			if (offset != 0) {
				try? self.data?.putUnsignedInt(at: offset + position, with: newValue)
			}
		}
	}

	var testhashs64Fnv1: Int64 {
		get {
			let offset = __offset(virtualTableOffset: 40)
			return offset != 0 ? (data?.getLong(at: offset + position))! : 0
		}
		set {
			let offset = __offset(virtualTableOffset: 40)
			if (offset != 0) {
				try? self.data?.putLong(at: offset + position, with: newValue)
			}
		}
	}

	var testhashu64Fnv1: UInt64 {
		get {
			let offset = __offset(virtualTableOffset: 42)
			return offset != 0 ? (data?.getUnsignedLong(at: offset + position))! : 0
		}
		set {
			let offset = __offset(virtualTableOffset: 42)
			if (offset != 0) {
				try? self.data?.putUnsignedLong(at: offset + position, with: newValue)
			}
		}
	}

	var testhashs32Fnv1a: Int32 {
		get {
			let offset = __offset(virtualTableOffset: 44)
			return offset != 0 ? (data!.getInteger(at: offset + position)) as Int32 : 0
		}
		set {
			let offset = __offset(virtualTableOffset: 44)
			if (offset != 0) {
				try? self.data?.putInt(at: offset + position, with: newValue)
			}
		}
	}

	var testhashu32Fnv1a: UInt32 {
		get {
			let offset = __offset(virtualTableOffset: 46)
			return offset != 0 ? (data!.getInteger(at: offset + position)) as UInt32 : 0
		}
		set {
			let offset = __offset(virtualTableOffset: 46)
			if (offset != 0) {
				try? self.data?.putUnsignedInt(at: offset + position, with: newValue)
			}
		}
	}

	var testhashs64Fnv1a: Int64 {
		get {
			let offset = __offset(virtualTableOffset: 48)
			return offset != 0 ? (data?.getLong(at: offset + position))! : 0
		}
		set {
			let offset = __offset(virtualTableOffset: 48)
			if (offset != 0) {
				try? self.data?.putLong(at: offset + position, with: newValue)
			}
		}
	}

	var testhashu64Fnv1a: UInt64 {
		get {
			let offset = __offset(virtualTableOffset: 50)
			return offset != 0 ? (data?.getUnsignedLong(at: offset + position))! : 0
		}
		set {
			let offset = __offset(virtualTableOffset: 50)
			if (offset != 0) {
				try? self.data?.putUnsignedLong(at: offset + position, with: newValue)
			}
		}
	}

	var testarrayofbools: VectorBoolHelper<Monster> {
		if let testarrayofboolsVector = testarrayofboolsVectorHelper as VectorBoolHelper<Monster>? {
			return testarrayofboolsVector
		}
		testarrayofboolsVectorHelper = VectorBoolHelper<Monster>(object: self, offset: 52)
		{ (table, at, value) -> Bool in
			do {
				try table.data?.putBool(at: at, with: value)
				return true
			} catch {
				return false
			}
		}
		return testarrayofboolsVectorHelper!
	}

	var testarrayofboolsCount: Int {
		get {
			let offset = __offset(virtualTableOffset: 52)
			return offset != 0 ? __vectorLength(offset: offset) : 0
		}
	}

	var testf: Float {
		get {
			let offset = __offset(virtualTableOffset: 54)
			return offset != 0 ? (data?.getFloat(at: offset + position))! : 3.14159
		}
		set {
			let offset = __offset(virtualTableOffset: 54)
			if (offset != 0) {
				try? self.data?.putFloat(at: offset + position, with: newValue)
			}
		}
	}

	var testf2: Float {
		get {
			let offset = __offset(virtualTableOffset: 56)
			return offset != 0 ? (data?.getFloat(at: offset + position))! : 3.0
		}
		set {
			let offset = __offset(virtualTableOffset: 56)
			if (offset != 0) {
				try? self.data?.putFloat(at: offset + position, with: newValue)
			}
		}
	}

	var testf3: Float {
		get {
			let offset = __offset(virtualTableOffset: 58)
			return offset != 0 ? (data?.getFloat(at: offset + position))! : 0.0
		}
		set {
			let offset = __offset(virtualTableOffset: 58)
			if (offset != 0) {
				try? self.data?.putFloat(at: offset + position, with: newValue)
			}
		}
	}

	var testarrayofstring2: VectorStringHelper<Monster> {
		if let testarrayofstring2Vector = testarrayofstring2VectorHelper as VectorStringHelper<Monster>? {
			return testarrayofstring2Vector
		}
		testarrayofstring2VectorHelper = VectorStringHelper<Monster>(object: self, offset: 60)
		return testarrayofstring2VectorHelper!
	}

	var testarrayofstring2Count: Int {
		get {
			let offset = __offset(virtualTableOffset: 60)
			return offset != 0 ? __vectorLength(offset: offset) : 0
		}
	}

}

extension Monster {

	public static func startMonster(_ builder: Builder) throws {
		try builder.startObject(numberOfFields: 29)
	}

	public static func addPos(_ builder: Builder, posOffset: UOffsetT) throws {
		try builder.putStruct(virtualTable: 0, offset: posOffset, defaultOffset: 0)
	}

	public static func addMana(_ builder: Builder, mana: Int16) throws {
		try builder.putShort(offset: 1, with: mana, byDefault: 150)
	}

	public static func addHp(_ builder: Builder, hp: Int16) throws {
		try builder.putShort(offset: 2, with: hp, byDefault: 100)
	}

	public static func addName(_ builder: Builder, nameOffset: UOffsetT) throws {
		try builder.putOffset(virtualTable: 3, offset: nameOffset, defaultOffset: 0)
	}

	public static func addInventory(_ builder: Builder, inventoryOffset: UOffsetT) throws {
		try builder.putOffset(virtualTable: 5, offset: inventoryOffset, defaultOffset: 0)
	}

	public static func createInventoryVectory(_ builder: Builder, inventory: [UInt8]) throws -> UOffsetT {
		_ = try builder.startVector(withElementSize: 1, count: inventory.count, alignment: 1)
		for i in (0..<inventory.count).reversed() {
			try builder.putUnsignedByte(with: inventory[i])
		}
		return try builder.endVector(vectorNumElems: inventory.count)
	}

	public static func startInventoryVector(_ builder: Builder, withNumberOfElement: Int) throws -> UOffsetT {
		return try builder.startVector(withElementSize: 1, count: withNumberOfElement, alignment: 1)
	}

	public static func addColor(_ builder: Builder, color: Int8) throws {
		try builder.putByte(offset: 6, with: color, byDefault: 8)
	}

	public static func addTestType(_ builder: Builder, testType: UInt8) throws {
		try builder.putUnsignedByte(offset: 7, with: testType, byDefault: 0)
	}

	public static func addTest(_ builder: Builder, testOffset: UOffsetT) throws {
		try builder.putOffset(virtualTable: 8, offset: testOffset, defaultOffset: 0)
	}

	public static func addTest4(_ builder: Builder, test4Offset: UOffsetT) throws {
		try builder.putOffset(virtualTable: 9, offset: test4Offset, defaultOffset: 0)
	}

	public static func startTest4Vector(_ builder: Builder, withNumberOfElement: Int) throws -> UOffsetT {
		return try builder.startVector(withElementSize: 4, count: withNumberOfElement, alignment: 2)
	}

	public static func addTestarrayofstring(_ builder: Builder, testarrayofstringOffset: UOffsetT) throws {
		try builder.putOffset(virtualTable: 10, offset: testarrayofstringOffset, defaultOffset: 0)
	}

	public static func createTestarrayofstringVector(_ builder: Builder, testarrayofstring: [UOffsetT]) throws -> UOffsetT {
		_ = try builder.startVector(withElementSize: 4, count: testarrayofstring.count, alignment: 4)
		for i in (0..<testarrayofstring.count).reversed() {
			try builder.putUnsignedTableOffset(offset: testarrayofstring[i])
		}
		return try builder.endVector(vectorNumElems: testarrayofstring.count)
	}

	public static func startTestarrayofstringVector(_ builder: Builder, withNumberOfElement: Int) throws -> UOffsetT {
		return try builder.startVector(withElementSize: 4, count: withNumberOfElement, alignment: 4)
	}

	public static func addTestarrayoftables(_ builder: Builder, testarrayoftablesOffset: UOffsetT) throws {
		try builder.putOffset(virtualTable: 11, offset: testarrayoftablesOffset, defaultOffset: 0)
	}

	public static func startTestarrayoftablesVector(_ builder: Builder, withNumberOfElement: Int) throws -> UOffsetT {
		return try builder.startVector(withElementSize: 4, count: withNumberOfElement, alignment: 4)
	}

	public static func addEnemy(_ builder: Builder, enemyOffset: UOffsetT) throws {
		try builder.putStruct(virtualTable: 12, offset: enemyOffset, defaultOffset: 0)
	}

	public static func addTestnestedflatbuffer(_ builder: Builder, testnestedflatbufferOffset: UOffsetT) throws {
		try builder.putOffset(virtualTable: 13, offset: testnestedflatbufferOffset, defaultOffset: 0)
	}

	public static func createTestnestedflatbufferVectory(_ builder: Builder, testnestedflatbuffer: [UInt8]) throws -> UOffsetT {
		_ = try builder.startVector(withElementSize: 1, count: testnestedflatbuffer.count, alignment: 1)
		for i in (0..<testnestedflatbuffer.count).reversed() {
			try builder.putUnsignedByte(with: testnestedflatbuffer[i])
		}
		return try builder.endVector(vectorNumElems: testnestedflatbuffer.count)
	}

	public static func startTestnestedflatbufferVector(_ builder: Builder, withNumberOfElement: Int) throws -> UOffsetT {
		return try builder.startVector(withElementSize: 1, count: withNumberOfElement, alignment: 1)
	}

	public static func addTestempty(_ builder: Builder, testemptyOffset: UOffsetT) throws {
		try builder.putStruct(virtualTable: 14, offset: testemptyOffset, defaultOffset: 0)
	}

	public static func addTestbool(_ builder: Builder, testbool: Bool) throws {
		try builder.putBool(offset: 15, with: testbool, byDefault: false)
	}

	public static func addTesthashs32Fnv1(_ builder: Builder, testhashs32Fnv1: Int32) throws {
		try builder.putInt(offset: 16, with: testhashs32Fnv1, byDefault: 0)
	}

	public static func addTesthashu32Fnv1(_ builder: Builder, testhashu32Fnv1: UInt32) throws {
		try builder.putUnsignedInt(offset: 17, with: testhashu32Fnv1, byDefault: 0)
	}

	public static func addTesthashs64Fnv1(_ builder: Builder, testhashs64Fnv1: Int64) throws {
		try builder.putLong(offset: 18, with: testhashs64Fnv1, byDefault: 0)
	}

	public static func addTesthashu64Fnv1(_ builder: Builder, testhashu64Fnv1: UInt64) throws {
		try builder.putUnsignedLong(offset: 19, with: testhashu64Fnv1, byDefault: 0)
	}

	public static func addTesthashs32Fnv1a(_ builder: Builder, testhashs32Fnv1a: Int32) throws {
		try builder.putInt(offset: 20, with: testhashs32Fnv1a, byDefault: 0)
	}

	public static func addTesthashu32Fnv1a(_ builder: Builder, testhashu32Fnv1a: UInt32) throws {
		try builder.putUnsignedInt(offset: 21, with: testhashu32Fnv1a, byDefault: 0)
	}

	public static func addTesthashs64Fnv1a(_ builder: Builder, testhashs64Fnv1a: Int64) throws {
		try builder.putLong(offset: 22, with: testhashs64Fnv1a, byDefault: 0)
	}

	public static func addTesthashu64Fnv1a(_ builder: Builder, testhashu64Fnv1a: UInt64) throws {
		try builder.putUnsignedLong(offset: 23, with: testhashu64Fnv1a, byDefault: 0)
	}

	public static func addTestarrayofbools(_ builder: Builder, testarrayofboolsOffset: UOffsetT) throws {
		try builder.putOffset(virtualTable: 24, offset: testarrayofboolsOffset, defaultOffset: 0)
	}

	public static func createTestarrayofboolsVectory(_ builder: Builder, testarrayofbools: [Bool]) throws -> UOffsetT {
		_ = try builder.startVector(withElementSize: 1, count: testarrayofbools.count, alignment: 1)
		for i in (0..<testarrayofbools.count).reversed() {
			try builder.putBool(with: testarrayofbools[i])
		}
		return try builder.endVector(vectorNumElems: testarrayofbools.count)
	}

	public static func startTestarrayofboolsVector(_ builder: Builder, withNumberOfElement: Int) throws -> UOffsetT {
		return try builder.startVector(withElementSize: 1, count: withNumberOfElement, alignment: 1)
	}

	public static func addTestf(_ builder: Builder, testf: Float32) throws {
		try builder.putFloat(offset: 25, with: testf, byDefault: 3.14159)
	}

	public static func addTestf2(_ builder: Builder, testf2: Float32) throws {
		try builder.putFloat(offset: 26, with: testf2, byDefault: 3.0)
	}

	public static func addTestf3(_ builder: Builder, testf3: Float32) throws {
		try builder.putFloat(offset: 27, with: testf3, byDefault: 0.0)
	}

	public static func addTestarrayofstring2(_ builder: Builder, testarrayofstring2Offset: UOffsetT) throws {
		try builder.putOffset(virtualTable: 28, offset: testarrayofstring2Offset, defaultOffset: 0)
	}

	public static func createTestarrayofstring2Vector(_ builder: Builder, testarrayofstring2: [UOffsetT]) throws -> UOffsetT {
		_ = try builder.startVector(withElementSize: 4, count: testarrayofstring2.count, alignment: 4)
		for i in (0..<testarrayofstring2.count).reversed() {
			try builder.putUnsignedTableOffset(offset: testarrayofstring2[i])
		}
		return try builder.endVector(vectorNumElems: testarrayofstring2.count)
	}

	public static func startTestarrayofstring2Vector(_ builder: Builder, withNumberOfElement: Int) throws -> UOffsetT {
		return try builder.startVector(withElementSize: 4, count: withNumberOfElement, alignment: 4)
	}

	public static func endMonster(_ builder: Builder) throws -> UOffsetT {
		return try builder.endObject()
	}

	public static func finishBuffer(_ builder: Builder, offset: UOffsetT) throws {
		try builder.finish(by: offset, file: "MONS")
	}
}

